// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: model/uta.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UTAClient is the client API for UTA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UTAClient interface {
	Checkoff(ctx context.Context, in *CheckoffRequest, opts ...grpc.CallOption) (*CheckoffReply, error)
	AddGradeOption(ctx context.Context, in *GradeOption, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteGradeOption(ctx context.Context, in *GradeOption, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllSwapRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllSwapRequestsReply, error)
	HandleSwapRequests(ctx context.Context, in *HandleSwapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type uTAClient struct {
	cc grpc.ClientConnInterface
}

func NewUTAClient(cc grpc.ClientConnInterface) UTAClient {
	return &uTAClient{cc}
}

func (c *uTAClient) Checkoff(ctx context.Context, in *CheckoffRequest, opts ...grpc.CallOption) (*CheckoffReply, error) {
	out := new(CheckoffReply)
	err := c.cc.Invoke(ctx, "/here.UTA/Checkoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTAClient) AddGradeOption(ctx context.Context, in *GradeOption, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/here.UTA/AddGradeOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTAClient) DeleteGradeOption(ctx context.Context, in *GradeOption, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/here.UTA/DeleteGradeOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTAClient) GetAllSwapRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllSwapRequestsReply, error) {
	out := new(GetAllSwapRequestsReply)
	err := c.cc.Invoke(ctx, "/here.UTA/GetAllSwapRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTAClient) HandleSwapRequests(ctx context.Context, in *HandleSwapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/here.UTA/HandleSwapRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UTAServer is the server API for UTA service.
// All implementations must embed UnimplementedUTAServer
// for forward compatibility
type UTAServer interface {
	Checkoff(context.Context, *CheckoffRequest) (*CheckoffReply, error)
	AddGradeOption(context.Context, *GradeOption) (*emptypb.Empty, error)
	DeleteGradeOption(context.Context, *GradeOption) (*emptypb.Empty, error)
	GetAllSwapRequests(context.Context, *emptypb.Empty) (*GetAllSwapRequestsReply, error)
	HandleSwapRequests(context.Context, *HandleSwapRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUTAServer()
}

// UnimplementedUTAServer must be embedded to have forward compatible implementations.
type UnimplementedUTAServer struct {
}

func (UnimplementedUTAServer) Checkoff(context.Context, *CheckoffRequest) (*CheckoffReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkoff not implemented")
}
func (UnimplementedUTAServer) AddGradeOption(context.Context, *GradeOption) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGradeOption not implemented")
}
func (UnimplementedUTAServer) DeleteGradeOption(context.Context, *GradeOption) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGradeOption not implemented")
}
func (UnimplementedUTAServer) GetAllSwapRequests(context.Context, *emptypb.Empty) (*GetAllSwapRequestsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSwapRequests not implemented")
}
func (UnimplementedUTAServer) HandleSwapRequests(context.Context, *HandleSwapRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleSwapRequests not implemented")
}
func (UnimplementedUTAServer) mustEmbedUnimplementedUTAServer() {}

// UnsafeUTAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UTAServer will
// result in compilation errors.
type UnsafeUTAServer interface {
	mustEmbedUnimplementedUTAServer()
}

func RegisterUTAServer(s grpc.ServiceRegistrar, srv UTAServer) {
	s.RegisterService(&UTA_ServiceDesc, srv)
}

func _UTA_Checkoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTAServer).Checkoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/here.UTA/Checkoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTAServer).Checkoff(ctx, req.(*CheckoffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTA_AddGradeOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTAServer).AddGradeOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/here.UTA/AddGradeOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTAServer).AddGradeOption(ctx, req.(*GradeOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTA_DeleteGradeOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTAServer).DeleteGradeOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/here.UTA/DeleteGradeOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTAServer).DeleteGradeOption(ctx, req.(*GradeOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTA_GetAllSwapRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTAServer).GetAllSwapRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/here.UTA/GetAllSwapRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTAServer).GetAllSwapRequests(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTA_HandleSwapRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTAServer).HandleSwapRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/here.UTA/HandleSwapRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTAServer).HandleSwapRequests(ctx, req.(*HandleSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UTA_ServiceDesc is the grpc.ServiceDesc for UTA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UTA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "here.UTA",
	HandlerType: (*UTAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checkoff",
			Handler:    _UTA_Checkoff_Handler,
		},
		{
			MethodName: "AddGradeOption",
			Handler:    _UTA_AddGradeOption_Handler,
		},
		{
			MethodName: "DeleteGradeOption",
			Handler:    _UTA_DeleteGradeOption_Handler,
		},
		{
			MethodName: "GetAllSwapRequests",
			Handler:    _UTA_GetAllSwapRequests_Handler,
		},
		{
			MethodName: "HandleSwapRequests",
			Handler:    _UTA_HandleSwapRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/uta.proto",
}
